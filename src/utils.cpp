#include "utils.h"

namespace Utils
{
    namespace Encodings
    {
        const uint16_t (&cp1251())[256]
        {
            static constexpr uint16_t array[256]{0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
                                                 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
                                                 0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,
                                                 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
                                                 0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
                                                 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
                                                 0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
                                                 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
                                                 0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
                                                 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
                                                 0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
                                                 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
                                                 0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
                                                 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
                                                 0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
                                                 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
                                                 0x0402, 0x0403, 0x201A, 0x0453, 0x201E, 0x2026, 0x2020, 0x2021,
                                                 0x20AC, 0x2030, 0x0409, 0x2039, 0x040A, 0x040C, 0x040B, 0x040F,
                                                 0x0452, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
                                                 0xFFFF, 0x2122, 0x0459, 0x203A, 0x045A, 0x045C, 0x045B, 0x045F,
                                                 0x00A0, 0x040E, 0x045E, 0x0408, 0x00A4, 0x0490, 0x00A6, 0x00A7,
                                                 0x0401, 0x00A9, 0x0404, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x0407,
                                                 0x00B0, 0x00B1, 0x0406, 0x0456, 0x0491, 0x00B5, 0x00B6, 0x00B7,
                                                 0x0451, 0x2116, 0x0454, 0x00BB, 0x0458, 0x0405, 0x0455, 0x0457,
                                                 0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
                                                 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
                                                 0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
                                                 0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
                                                 0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
                                                 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
                                                 0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
                                                 0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F};
            return array;
        }
    }

    inline namespace Random
    {
        uint32_t Noise32(uint32_t in)
        {
            uint32_t ret = 0;
            unsigned char h;
            static const unsigned char T[256]
            {
                 98,  6, 85,150, 36, 23,112,164,135,207,169,  5, 26, 64,165,219, //  1
                 61, 20, 68, 89,130, 63, 52,102, 24,229,132,245, 80,216,195,115, //  2
                 90,168,156,203,177,120,  2,190,188,  7,100,185,174,243,162, 10, //  3
                237, 18,253,225,  8,208,172,244,255,126,101, 79,145,235,228,121, //  4
                123,251, 67,250,161,  0,107, 97,241,111,181, 82,249, 33, 69, 55, //  5
                 59,153, 29,  9,213,167, 84, 93, 30, 46, 94, 75,151,114, 73,222, //  6
                197, 96,210, 45, 16,227,248,202, 51,152,252,125, 81,206,215,186, //  7
                 39,158,178,187,131,136,  1, 49, 50, 17,141, 91, 47,129, 60, 99, //  8
                154, 35, 86,171,105, 34, 38,200,147, 58, 77,118,173,246, 76,254, //  9
                133,232,196,144,198,124, 53,  4,108, 74,223,234,134,230,157,139, // 10
                189,205,199,128,176, 19,211,236,127,192,231, 70,233, 88,146, 44, // 11
                183,201, 22, 83, 13,214,116,109,159, 32, 95,226,140,220, 57, 12, // 12
                221, 31,209,182,143, 92,149,184,148, 62,113, 65, 37, 27,106,166, // 13
                  3, 14,204, 72, 21, 41, 56, 66, 28,193, 40,217, 25, 54,179,117, // 14
                238, 87,240,155,180,170,242,212,191,163, 78,218,137,194,175,110, // 15
                 43,119,224, 71,122,142, 42,160,104, 48,247,103, 15, 11,138,239  // 16
            };

            for (std::size_t j = 0; j < 4; ++j)
            {
                h = T[((in & 0xff) + j) % 256];
                for (std::size_t i = 1; i < 4; ++i)
                    h = T[h ^ ((in >> (i * 8)) & 0xff)];
                ret |= h << (j * 8);
            }
            return ret;
        }
    }
}
